<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="hipster" default="default" basedir=".">
    <description>Builds, tests, and runs the project hipster.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

    -pre-init:                 called before initialization of project properties
    -post-init:                called after initialization of project properties
    -pre-compile:              called before javac compilation
    -post-compile:             called after javac compilation
    -pre-compile-single:       called before javac compilation of single file
    -post-compile-single:      called after javac compilation of single file
    -pre-compile-test:         called before javac compilation of JUnit tests
    -post-compile-test:        called after javac compilation of JUnit tests
    -pre-compile-test-single:  called before javac compilation of single JUnit test
    -post-compile-test-single: called after javac compilation of single JUunit test
    -pre-jar:                  called before JAR building
    -post-jar:                 called after JAR building
    -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

    <target name="-post-compile">
    <obfuscate>
    <fileset dir="${build.classes.dir}"/>
    </obfuscate>
    </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

    -init-macrodef-javac:     defines macro for javac compilation
    -init-macrodef-junit:     defines macro for junit execution
    -init-macrodef-debug:     defines macro for class debugging
    -init-macrodef-java:      defines macro for class execution
    -do-jar-with-manifest:    JAR building (if you are using a manifest)
    -do-jar-without-manifest: JAR building (if you are not using a manifest)
    run:                      execution of project 
    -javadoc-build:           Javadoc generation
    test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

    <target name="run" depends="hipster-impl.jar">
    <exec dir="bin" executable="launcher.exe">
    <arg file="${dist.jar}"/>
    </exec>
    </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    <target name="-pre-init">
        <condition property="isMacOSX">
            <and>
                <os family="mac"/>
                <os family="unix"/>
            </and>
        </condition>
        <condition property="isWindows">
            <os family="windows"/>
        </condition>
    </target>
    
    <!--                    -->
    <!-- CHECK CODING STYLE -->
    <!--                    -->
    <target name="pmd">
        <property name="pmd.dir" value="dist/pmd"/>
        <delete dir="${pmd.dir}"/>
        <mkdir dir="${pmd.dir}"/>

        <path id="pmd.classpath">
            <fileset dir="lib">
                <include name="jaxen*.jar"/>
                <include name="pmd*.jar"/>
            </fileset>
        </path>
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
        classpathref="pmd.classpath"/>
        <pmd shortFilenames="true">
            <ruleset>basic</ruleset>
            <formatter type="html" toFile="${pmd.dir}/pmd_report.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
        </pmd>
    </target>
    <target name="checkstyle" depends="init,compile-test,-pre-test-run">
        <property name="checkstyle.dir" value="dist/checkstyle"/>
        <delete dir="${checkstyle.dir}"/>
        <mkdir dir="${checkstyle.dir}"/>

        <!-- Extra task for checking style -->
        <taskdef resource="checkstyletask.properties"
        classpath="lib/checkstyle-all-4.2.jar"/>
        <path id="javancss.classpath">
            <fileset dir="lib">
                <include name="ccl*.jar"/>
                <include name="checkstyle*.jar"/>
                <include name="javancss*.jar"/>
            </fileset>
            <fileset dir="src"/>
        </path>
        <taskdef name="javancss" classname="net.jernigan.javancss2ant.JavaNCSS"
        classpathref="javancss.classpath"/>
        <javancss srcdir="src"
        abortOnFail="false" ccnPerFuncMax="20"
        includes="**/*.java"
        />
        <checkstyle config="etc/sun_checks.xml"
            failureProperty="checkstyle.failure"
            failOnViolation="false">
            <formatter type="xml" tofile="${checkstyle.dir}/checkstyle_report.xml"/>
            <fileset dir="src" includes="**/*.java"/>
        </checkstyle>

        <style in="${checkstyle.dir}/checkstyle_report.xml"
        out="${checkstyle.dir}/checkstyle_report.html" 
        style="etc/checkstyle-simple.xsl"/>
    </target>
    <target name="inspect"
    description="Generates a report of code convention violations."
    depends="pmd,checkstyle,coverage"/>
    <target name="coverage">
        <property name="cobertura.dir" value="lib" />

        <path id="cobertura.classpath">
            <fileset dir="${cobertura.dir}">
                <include name="*.jar" />
            </fileset>
        </path>

        <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

        <delete file="cobertura.ser" />
        
        <delete dir="instrument" />
        <mkdir dir="instrument"/>
        
        <delete dir="dist/coverage" />
        <mkdir dir="dist/coverage"/>

        <cobertura-instrument todir="instrument">
            <includeClasses regex=".*" />
            <excludeClasses regex=".*\.Test.*" />
            <fileset dir="build/classes">
                <include name="*/**" />
                <!--                <include name="hipster.jar" /> -->
            </fileset>
        </cobertura-instrument>

        <junit showoutput="true" printsummary="yes" dir="${basedir}" fork="yes" haltonfailure="yes">
            <sysproperty key="net.sourceforge.cobertura.datafile"
            file="${basedir}/cobertura.ser" />

            <classpath>
                <pathelement path="instrument"/>
                <fileset dir="lib">
                    <include name="*.jar"/>
                    <include name="*.zip"/>
                </fileset>
                <pathelement path="build/test/classes"/>
                <pathelement path="build/classes"/>
            </classpath>

            <batchtest todir="build/test/results">
                <fileset dir="test">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
        </junit>
        
        <cobertura-report format="html" datafile="cobertura.ser" destdir="dist/coverage" >
            <fileset dir="src">
                <include name="**/*.java" />
            </fileset>
        </cobertura-report>
        
        <delete dir="instrument" />
        <delete file="cobertura.ser" />
    </target>

    <target name="-post-clean">
        <delete>
            <fileset dir="application">
                <include name="**/*"/>
            </fileset>
        </delete>
        <delete dir="application/hIPster.app"/>
    </target>

    <target name="exe" depends="exeMac,exeWin"/>

    <target name="exeInit" depends="jar" if="isMacOSX">
    </target>
    
    <target name="jni"  description="Create HelpBook JNI Library">
        <mkdir dir="build"/>
        <exec executable="cc">
            <arg line="-c"/>
            <arg line="-I/System/Library/Frameworks/JavaVM.framework/Headers"/>
            <arg line="-o build/HelpBookJNI.o"/> 
            <arg value="platforms/macosx/obj-c/HelpBookJNI.m"/>
        </exec>
 
        <exec executable="cc">
            <arg line="-dynamiclib"/>
            <arg line="-framework JavaVM"/>
            <arg line="-framework Cocoa"/>
            <arg line="-o build/libHelpBookJNI.jnilib"/>
            <arg value="build/HelpBookJNI.o"/>   
        </exec>
   
        <delete file="build/HelpBookJNI.o" quiet="true"/>  
    </target>

    <target name="exeMac" depends="exeInit,jni" if="isMacOSX">
        <taskdef name="jarbundler"
        classpath="platforms/macosx/jarbundler-1.9.jar:platforms/macosx/xercesimpl.jar" 
        classname="net.sourceforge.jarbundler.JarBundler"/>

        <jarbundler dir="${basedir}" verbose="true" showPlist="false"
            name="application/hIPster"
            shortname="hIPster"
            stubfile="hIPster"
            signature="????"
            mainclass="dg.hipster.Main"
            jar="dist/hipster.jar"
            icon="platforms/macosx/hipster.icns"
            jvmversion="1.5+"
            version="0.1"
            infostring="Idea Processor"
            bundleid="dg.hipster"
            helpbookfolder="HelpBook"
            helpbookname="hIPster Help" > 


            <!-- Associate document types with this application -->
            <documenttype name="hIPster Idea Map"
            extensions="opml" 
            iconFile="platforms/macosx/hipster-doc.icns"
            role="Editor"/>
            <javafilelist dir="${basedir}/build" files="libHelpBookJNI.jnilib"/>


            <!-- Copy the HelpBooks to the language specific folders            -->
            <!--  English will use the foldername and book name from the Bundle -->
            <!--  German or 'de' will use the custom folder name and book name  -->
     
            <HelpBook locale="English">
                <fileset dir="etc/help/English" />
                <fileset dir="etc/help/common" />
            </HelpBook>
        </jarbundler>
        <exec dir="platforms/macosx" 
            executable="/bin/zsh" os="Mac OS X">
            <arg line="mkdmg.sh ${basedir}/application/hIPster.app ${basedir}/dist hipster"/>
        </exec>
    
    </target>
    
    <target name="exeWin" depends="exeInit" if="isWindows">
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
        classpath="platforms/windows/launch4j.jar:platforms/windows/xstream.jar" />
        <launch4j configFile="platforms/windows/launch4jexe.xml" />
        <zip destfile="dist/hipster-win.zip" basedir="application" includes="hIPster.exe"
        excludes="**/.svn"/>
    </target>
</project>
